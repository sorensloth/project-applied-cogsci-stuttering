{"ast":null,"code":"var _jsxFileName = \"/Users/sorensloth/Git_repositories/Project-Applied-CogSci-Stuttering/sts-frontend/src/components/SyllableStepper.tsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport { loadSentencesFromCSV } from '../utils/parseCSV';\nimport { motion, AnimatePresence } from 'framer-motion';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst SyllableStepper = () => {\n  _s();\n  const [sentences, setSentences] = useState([]);\n  const [currentSentenceIndex, setCurrentSentenceIndex] = useState(0);\n  const [currentSyllableIndex, setCurrentSyllableIndex] = useState(0);\n\n  // Load CSV once\n  useEffect(() => {\n    fetch('/STS_practice_sentences.csv').then(res => res.text()).then(text => {\n      const result = loadSentencesFromCSV(text);\n      setSentences(result);\n    });\n  }, []);\n  const nextSyllable = () => {\n    const sentence = sentences[currentSentenceIndex];\n    if (!sentence) return;\n\n    // If not at end of current sentence, move to next syllable\n    if (currentSyllableIndex < sentence.flattenedSyllables.length - 1) {\n      setCurrentSyllableIndex(prev => prev + 1);\n    }\n    // Else go to next sentence if any\n    else if (currentSentenceIndex < sentences.length - 1) {\n      setCurrentSentenceIndex(prev => prev + 1);\n      setCurrentSyllableIndex(0);\n    }\n  };\n\n  // Spacebar listener\n  useEffect(() => {\n    const handleKey = e => {\n      if (e.code === 'Space') {\n        e.preventDefault();\n        nextSyllable();\n      }\n    };\n    window.addEventListener('keydown', handleKey);\n    return () => window.removeEventListener('keydown', handleKey);\n  }, [sentences, currentSentenceIndex, currentSyllableIndex]);\n  if (sentences.length === 0) {\n    return /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Loading sentences...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 12\n    }, this);\n  }\n  const currentSentence = sentences[currentSentenceIndex];\n  const totalSyllables = currentSentence.flattenedSyllables.length;\n  const currentSyllable = currentSentence.flattenedSyllables[currentSyllableIndex];\n\n  // Which word are we on?\n  const {\n    wordIndex: currentWordIndex\n  } = currentSentence.mapping[currentSyllableIndex];\n\n  // Build the entire sentence from the original words\n  // We'll color each word based on whether it's completed, current, or future\n  const sentenceDisplay = currentSentence.words.map((w, idx) => {\n    // Count how many syllables are in this word\n    const wordSyllCount = w.syllables.length;\n    // Count how many total syllables have passed before this word\n    const syllablesBeforeThisWord = currentSentence.words.slice(0, idx).reduce((acc, word) => acc + word.syllables.length, 0);\n\n    // If the user has advanced beyond all syllables in this word, it's completed\n    const wordLastSyllableIndex = syllablesBeforeThisWord + wordSyllCount - 1;\n\n    // If we've advanced beyond that last syllable, the entire word is \"completed\"\n    if (currentSyllableIndex > wordLastSyllableIndex) {\n      return /*#__PURE__*/_jsxDEV(\"span\", {\n        style: {\n          color: 'green',\n          marginRight: '0.5rem'\n        },\n        children: w.word\n      }, idx, false, {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 9\n      }, this);\n    }\n\n    // If we are currently in this word\n    if (idx === currentWordIndex) {\n      return /*#__PURE__*/_jsxDEV(\"span\", {\n        style: {\n          color: '#000',\n          fontWeight: 'bold',\n          marginRight: '0.5rem'\n        },\n        children: w.word\n      }, idx, false, {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 9\n      }, this);\n    }\n\n    // Otherwise, it's a future word\n    return /*#__PURE__*/_jsxDEV(\"span\", {\n      style: {\n        color: 'rgba(0,0,0,0.5)',\n        marginRight: '0.5rem'\n      },\n      children: w.word\n    }, idx, false, {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 7\n    }, this);\n  });\n\n  // Progress bar ratio\n  const progressRatio = (currentSyllableIndex + 1) / totalSyllables;\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      textAlign: 'center'\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"syllable-count\",\n      style: {\n        marginBottom: '0.5rem'\n      },\n      children: [\"Syllable \", currentSyllableIndex + 1, \" of \", totalSyllables]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        width: '80%',\n        height: '10px',\n        background: '#ddd',\n        borderRadius: '5px',\n        margin: '1rem auto',\n        overflow: 'hidden'\n      },\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          width: `${progressRatio * 100}%`,\n          height: '100%',\n          background: '#4caf50',\n          transition: 'width 0.3s ease'\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 117,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        marginBottom: '2rem',\n        fontSize: '1.5rem'\n      },\n      children: sentenceDisplay\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 128,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        display: 'flex',\n        flexDirection: 'column',\n        alignItems: 'center'\n      },\n      children: [/*#__PURE__*/_jsxDEV(AnimatePresence, {\n        mode: \"wait\",\n        children: /*#__PURE__*/_jsxDEV(motion.div, {\n          className: \"syllable-box\",\n          initial: {\n            opacity: 0,\n            scale: 0.8\n          },\n          animate: {\n            opacity: 1,\n            scale: 1\n          },\n          exit: {\n            opacity: 0,\n            scale: 0.8\n          },\n          transition: {\n            duration: 0.3\n          },\n          style: {\n            display: 'flex',\n            alignItems: 'center',\n            justifyContent: 'center',\n            minHeight: '120px',\n            minWidth: '250px',\n            textAlign: 'center'\n          },\n          children: currentSyllable\n        }, currentSyllable, false, {\n          fileName: _jsxFileName,\n          lineNumber: 135,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 134,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        style: {\n          marginTop: '2rem',\n          padding: '1rem 2rem',\n          fontSize: '1rem',\n          background: '#1c3faa',\n          color: 'white',\n          border: 'none',\n          borderRadius: '1rem',\n          cursor: 'pointer',\n          boxShadow: '0 4px 10px rgba(0, 0, 0, 0.1)'\n        },\n        onClick: () => setCurrentSyllableIndex(0),\n        children: \"\\uD83D\\uDD01 Restart Sentence\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 156,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 133,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 101,\n    columnNumber: 5\n  }, this);\n};\n_s(SyllableStepper, \"ikZUqHdjoTk9fy4es/hajzTlj4s=\");\n_c = SyllableStepper;\nexport default SyllableStepper;\nvar _c;\n$RefreshReg$(_c, \"SyllableStepper\");","map":{"version":3,"names":["React","useEffect","useState","loadSentencesFromCSV","motion","AnimatePresence","jsxDEV","_jsxDEV","SyllableStepper","_s","sentences","setSentences","currentSentenceIndex","setCurrentSentenceIndex","currentSyllableIndex","setCurrentSyllableIndex","fetch","then","res","text","result","nextSyllable","sentence","flattenedSyllables","length","prev","handleKey","e","code","preventDefault","window","addEventListener","removeEventListener","children","fileName","_jsxFileName","lineNumber","columnNumber","currentSentence","totalSyllables","currentSyllable","wordIndex","currentWordIndex","mapping","sentenceDisplay","words","map","w","idx","wordSyllCount","syllables","syllablesBeforeThisWord","slice","reduce","acc","word","wordLastSyllableIndex","style","color","marginRight","fontWeight","progressRatio","textAlign","className","marginBottom","width","height","background","borderRadius","margin","overflow","transition","fontSize","display","flexDirection","alignItems","mode","div","initial","opacity","scale","animate","exit","duration","justifyContent","minHeight","minWidth","marginTop","padding","border","cursor","boxShadow","onClick","_c","$RefreshReg$"],"sources":["/Users/sorensloth/Git_repositories/Project-Applied-CogSci-Stuttering/sts-frontend/src/components/SyllableStepper.tsx"],"sourcesContent":["import React, { useEffect, useState } from 'react';\nimport { loadSentencesFromCSV, Sentence } from '../utils/parseCSV';\nimport { motion, AnimatePresence } from 'framer-motion';\n\nconst SyllableStepper: React.FC = () => {\n  const [sentences, setSentences] = useState<Sentence[]>([]);\n  const [currentSentenceIndex, setCurrentSentenceIndex] = useState(0);\n  const [currentSyllableIndex, setCurrentSyllableIndex] = useState(0);\n\n  // Load CSV once\n  useEffect(() => {\n    fetch('/STS_practice_sentences.csv')\n      .then(res => res.text())\n      .then(text => {\n        const result = loadSentencesFromCSV(text);\n        setSentences(result);\n      });\n  }, []);\n\n  const nextSyllable = () => {\n    const sentence = sentences[currentSentenceIndex];\n    if (!sentence) return;\n\n    // If not at end of current sentence, move to next syllable\n    if (currentSyllableIndex < sentence.flattenedSyllables.length - 1) {\n      setCurrentSyllableIndex(prev => prev + 1);\n    } \n    // Else go to next sentence if any\n    else if (currentSentenceIndex < sentences.length - 1) {\n      setCurrentSentenceIndex(prev => prev + 1);\n      setCurrentSyllableIndex(0);\n    }\n  };\n\n  // Spacebar listener\n  useEffect(() => {\n    const handleKey = (e: KeyboardEvent) => {\n      if (e.code === 'Space') {\n        e.preventDefault();\n        nextSyllable();\n      }\n    };\n    window.addEventListener('keydown', handleKey);\n    return () => window.removeEventListener('keydown', handleKey);\n  }, [sentences, currentSentenceIndex, currentSyllableIndex]);\n\n  if (sentences.length === 0) {\n    return <p>Loading sentences...</p>;\n  }\n\n  const currentSentence = sentences[currentSentenceIndex];\n  const totalSyllables = currentSentence.flattenedSyllables.length;\n  const currentSyllable = currentSentence.flattenedSyllables[currentSyllableIndex];\n\n  // Which word are we on?\n  const { wordIndex: currentWordIndex } = currentSentence.mapping[currentSyllableIndex];\n\n  // Build the entire sentence from the original words\n  // We'll color each word based on whether it's completed, current, or future\n  const sentenceDisplay = currentSentence.words.map((w, idx) => {\n    // Count how many syllables are in this word\n    const wordSyllCount = w.syllables.length;\n    // Count how many total syllables have passed before this word\n    const syllablesBeforeThisWord = currentSentence.words\n      .slice(0, idx)\n      .reduce((acc, word) => acc + word.syllables.length, 0);\n\n    // If the user has advanced beyond all syllables in this word, it's completed\n    const wordLastSyllableIndex = syllablesBeforeThisWord + wordSyllCount - 1;\n\n    // If we've advanced beyond that last syllable, the entire word is \"completed\"\n    if (currentSyllableIndex > wordLastSyllableIndex) {\n      return (\n        <span key={idx} style={{ color: 'green', marginRight: '0.5rem' }}>\n          {w.word}\n        </span>\n      );\n    }\n\n    // If we are currently in this word\n    if (idx === currentWordIndex) {\n      return (\n        <span key={idx} style={{ color: '#000', fontWeight: 'bold', marginRight: '0.5rem' }}>\n          {w.word}\n        </span>\n      );\n    }\n\n    // Otherwise, it's a future word\n    return (\n      <span key={idx} style={{ color: 'rgba(0,0,0,0.5)', marginRight: '0.5rem' }}>\n        {w.word}\n      </span>\n    );\n  });\n\n  // Progress bar ratio\n  const progressRatio = (currentSyllableIndex + 1) / totalSyllables;\n\n  return (\n    <div style={{ textAlign: 'center' }}>\n      <p className=\"syllable-count\" style={{ marginBottom: '0.5rem' }}>\n        Syllable {currentSyllableIndex + 1} of {totalSyllables}\n      </p>\n\n      {/* Progress Bar */}\n      <div\n        style={{\n          width: '80%',\n          height: '10px',\n          background: '#ddd',\n          borderRadius: '5px',\n          margin: '1rem auto',\n          overflow: 'hidden'\n        }}\n      >\n        <div\n          style={{\n            width: `${progressRatio * 100}%`,\n            height: '100%',\n            background: '#4caf50',\n            transition: 'width 0.3s ease'\n          }}\n        ></div>\n      </div>\n\n      {/* Display the entire sentence as words */}\n      <div style={{ marginBottom: '2rem', fontSize: '1.5rem' }}>\n        {sentenceDisplay}\n      </div>\n\n      {/* Animated Syllable Box */}\n      <div style={{ display: 'flex', flexDirection: 'column', alignItems: 'center' }}>\n        <AnimatePresence mode=\"wait\">\n          <motion.div\n            key={currentSyllable}\n            className=\"syllable-box\"\n            initial={{ opacity: 0, scale: 0.8 }}\n            animate={{ opacity: 1, scale: 1 }}\n            exit={{ opacity: 0, scale: 0.8 }}\n            transition={{ duration: 0.3 }}\n            style={{\n              display: 'flex',\n              alignItems: 'center',\n              justifyContent: 'center',\n              minHeight: '120px',\n              minWidth: '250px',\n              textAlign: 'center'\n            }}\n          >\n            {currentSyllable}\n          </motion.div>\n        </AnimatePresence>\n\n        {/* Restart Button */}\n        <button\n          style={{\n            marginTop: '2rem',\n            padding: '1rem 2rem',\n            fontSize: '1rem',\n            background: '#1c3faa',\n            color: 'white',\n            border: 'none',\n            borderRadius: '1rem',\n            cursor: 'pointer',\n            boxShadow: '0 4px 10px rgba(0, 0, 0, 0.1)'\n          }}\n          onClick={() => setCurrentSyllableIndex(0)}\n        >\n          🔁 Restart Sentence\n        </button>\n      </div>\n    </div>\n  );\n};\n\nexport default SyllableStepper;\n\n\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
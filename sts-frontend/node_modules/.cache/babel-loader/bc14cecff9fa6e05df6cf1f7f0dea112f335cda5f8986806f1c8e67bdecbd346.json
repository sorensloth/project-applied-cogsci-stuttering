{"ast":null,"code":"import Papa from 'papaparse';\nexport const loadSentencesFromCSV = csvText => {\n  const parsed = Papa.parse(csvText, {\n    header: true,\n    skipEmptyLines: true\n  });\n  const data = parsed.data;\n\n  // We'll group by sentenceNumber, but each sentence will have an array of WordData\n  const sentenceMap = {};\n  data.forEach(row => {\n    const sentenceNum = parseInt(row.sentence_number || row.sentenceNumber);\n    const word = row.word;\n    const splitted = row.syllables.split('-');\n    if (!sentenceMap[sentenceNum]) {\n      sentenceMap[sentenceNum] = [];\n    }\n    sentenceMap[sentenceNum].push({\n      word,\n      syllables: splitted\n    });\n  });\n\n  // Now build a final structure that also includes a flattened list of syllables\n  return Object.entries(sentenceMap).map(([num, words]) => {\n    const flattenedSyllables = [];\n    const mapping = [];\n    words.forEach((w, wordIndex) => {\n      w.syllables.forEach((syll, syllIndex) => {\n        flattenedSyllables.push(syll);\n        mapping.push({\n          wordIndex,\n          syllIndex\n        });\n      });\n    });\n    return {\n      sentenceNumber: parseInt(num),\n      words,\n      flattenedSyllables,\n      mapping\n    };\n  });\n};","map":{"version":3,"names":["Papa","loadSentencesFromCSV","csvText","parsed","parse","header","skipEmptyLines","data","sentenceMap","forEach","row","sentenceNum","parseInt","sentence_number","sentenceNumber","word","splitted","syllables","split","push","Object","entries","map","num","words","flattenedSyllables","mapping","w","wordIndex","syll","syllIndex"],"sources":["/Users/sorensloth/Git_repositories/Project-Applied-CogSci-Stuttering/sts-frontend/src/utils/parseCSV.ts"],"sourcesContent":["import Papa from 'papaparse';\n\nexport type WordData = {\n  word: string;\n  syllables: string[];\n};\n\nexport type Sentence = {\n  sentenceNumber: number;\n  words: WordData[];\n  flattenedSyllables: string[]; // all syllables from all words\n  mapping: { wordIndex: number; syllIndex: number }[]; // tells us which word/syllable index each flattened syllable belongs to\n};\n\nexport const loadSentencesFromCSV = (csvText: string): Sentence[] => {\n  const parsed = Papa.parse(csvText, {\n    header: true,\n    skipEmptyLines: true,\n  });\n\n  const data = parsed.data as any[];\n\n  // We'll group by sentenceNumber, but each sentence will have an array of WordData\n  const sentenceMap: Record<number, WordData[]> = {};\n\n  data.forEach(row => {\n    const sentenceNum = parseInt(row.sentence_number || row.sentenceNumber);\n    const word = row.word;\n    const splitted = row.syllables.split('-');\n\n    if (!sentenceMap[sentenceNum]) {\n      sentenceMap[sentenceNum] = [];\n    }\n\n    sentenceMap[sentenceNum].push({\n      word,\n      syllables: splitted,\n    });\n  });\n\n  // Now build a final structure that also includes a flattened list of syllables\n  return Object.entries(sentenceMap).map(([num, words]) => {\n    const flattenedSyllables: string[] = [];\n    const mapping: { wordIndex: number; syllIndex: number }[] = [];\n\n    words.forEach((w, wordIndex) => {\n      w.syllables.forEach((syll, syllIndex) => {\n        flattenedSyllables.push(syll);\n        mapping.push({ wordIndex, syllIndex });\n      });\n    });\n\n    return {\n      sentenceNumber: parseInt(num),\n      words,\n      flattenedSyllables,\n      mapping\n    };\n  });\n};\n"],"mappings":"AAAA,OAAOA,IAAI,MAAM,WAAW;AAc5B,OAAO,MAAMC,oBAAoB,GAAIC,OAAe,IAAiB;EACnE,MAAMC,MAAM,GAAGH,IAAI,CAACI,KAAK,CAACF,OAAO,EAAE;IACjCG,MAAM,EAAE,IAAI;IACZC,cAAc,EAAE;EAClB,CAAC,CAAC;EAEF,MAAMC,IAAI,GAAGJ,MAAM,CAACI,IAAa;;EAEjC;EACA,MAAMC,WAAuC,GAAG,CAAC,CAAC;EAElDD,IAAI,CAACE,OAAO,CAACC,GAAG,IAAI;IAClB,MAAMC,WAAW,GAAGC,QAAQ,CAACF,GAAG,CAACG,eAAe,IAAIH,GAAG,CAACI,cAAc,CAAC;IACvE,MAAMC,IAAI,GAAGL,GAAG,CAACK,IAAI;IACrB,MAAMC,QAAQ,GAAGN,GAAG,CAACO,SAAS,CAACC,KAAK,CAAC,GAAG,CAAC;IAEzC,IAAI,CAACV,WAAW,CAACG,WAAW,CAAC,EAAE;MAC7BH,WAAW,CAACG,WAAW,CAAC,GAAG,EAAE;IAC/B;IAEAH,WAAW,CAACG,WAAW,CAAC,CAACQ,IAAI,CAAC;MAC5BJ,IAAI;MACJE,SAAS,EAAED;IACb,CAAC,CAAC;EACJ,CAAC,CAAC;;EAEF;EACA,OAAOI,MAAM,CAACC,OAAO,CAACb,WAAW,CAAC,CAACc,GAAG,CAAC,CAAC,CAACC,GAAG,EAAEC,KAAK,CAAC,KAAK;IACvD,MAAMC,kBAA4B,GAAG,EAAE;IACvC,MAAMC,OAAmD,GAAG,EAAE;IAE9DF,KAAK,CAACf,OAAO,CAAC,CAACkB,CAAC,EAAEC,SAAS,KAAK;MAC9BD,CAAC,CAACV,SAAS,CAACR,OAAO,CAAC,CAACoB,IAAI,EAAEC,SAAS,KAAK;QACvCL,kBAAkB,CAACN,IAAI,CAACU,IAAI,CAAC;QAC7BH,OAAO,CAACP,IAAI,CAAC;UAAES,SAAS;UAAEE;QAAU,CAAC,CAAC;MACxC,CAAC,CAAC;IACJ,CAAC,CAAC;IAEF,OAAO;MACLhB,cAAc,EAAEF,QAAQ,CAACW,GAAG,CAAC;MAC7BC,KAAK;MACLC,kBAAkB;MAClBC;IACF,CAAC;EACH,CAAC,CAAC;AACJ,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
{"ast":null,"code":"var _jsxFileName = \"/Users/sorensloth/Git_repositories/Project-Applied-CogSci-Stuttering/sts-frontend/src/components/SyllableStepper.tsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport { loadSentencesFromCSV } from '../utils/parseCSV';\nimport { motion, AnimatePresence } from 'framer-motion';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst SyllableStepper = () => {\n  _s();\n  const [sentences, setSentences] = useState([]);\n  const [currentSentenceIndex, setCurrentSentenceIndex] = useState(0);\n  const [currentSyllableIndex, setCurrentSyllableIndex] = useState(0);\n\n  // Load CSV once\n  useEffect(() => {\n    fetch('/STS_practice_sentences.csv').then(res => res.text()).then(text => {\n      const result = loadSentencesFromCSV(text);\n      setSentences(result);\n    });\n  }, []);\n  const nextSyllable = () => {\n    const sentence = sentences[currentSentenceIndex];\n    if (!sentence) return;\n\n    // If not at the end of current sentence, go to next syllable\n    if (currentSyllableIndex < sentence.flattenedSyllables.length - 1) {\n      setCurrentSyllableIndex(prev => prev + 1);\n    }\n    // Else, go to the next sentence if available\n    else if (currentSentenceIndex < sentences.length - 1) {\n      setCurrentSentenceIndex(prev => prev + 1);\n      setCurrentSyllableIndex(0);\n    }\n  };\n\n  // Spacebar listener\n  useEffect(() => {\n    const handleKey = e => {\n      if (e.code === 'Space') {\n        e.preventDefault();\n        nextSyllable();\n      }\n    };\n    window.addEventListener('keydown', handleKey);\n    return () => window.removeEventListener('keydown', handleKey);\n  }, [sentences, currentSentenceIndex, currentSyllableIndex]);\n  if (sentences.length === 0) {\n    return /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Loading sentences...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 12\n    }, this);\n  }\n  const currentSentence = sentences[currentSentenceIndex];\n  const totalSyllables = currentSentence.flattenedSyllables.length;\n  const currentSyllable = currentSentence.flattenedSyllables[currentSyllableIndex];\n\n  // We'll need to know which word & syllable is \"current\"\n  const {\n    wordIndex: currentWordIndex,\n    syllIndex: currentWordSyllIndex\n  } = currentSentence.mapping[currentSyllableIndex];\n\n  // For each word, we highlight each syllable individually.\n  const sentenceDisplay = currentSentence.words.map((wordData, wIdx) => {\n    const {\n      word,\n      syllables\n    } = wordData;\n\n    // Count how many syllables come *before* this word (to find global indices).\n    const syllablesBeforeThisWord = currentSentence.words.slice(0, wIdx).reduce((acc, wd) => acc + wd.syllables.length, 0);\n\n    // Build a span for each syllable in the word\n    const partedWord = syllables.map((syll, i) => {\n      const globalSyllIndex = syllablesBeforeThisWord + i;\n      if (globalSyllIndex < currentSyllableIndex) {\n        // This syllable is completed\n        return /*#__PURE__*/_jsxDEV(\"span\", {\n          style: {\n            color: 'green'\n          },\n          children: syll\n        }, i, false, {\n          fileName: _jsxFileName,\n          lineNumber: 75,\n          columnNumber: 11\n        }, this);\n      } else if (globalSyllIndex === currentSyllableIndex) {\n        // This is the current syllable\n        return /*#__PURE__*/_jsxDEV(\"span\", {\n          style: {\n            fontWeight: 'bold',\n            color: '#000'\n          },\n          children: syll\n        }, i, false, {\n          fileName: _jsxFileName,\n          lineNumber: 82,\n          columnNumber: 11\n        }, this);\n      } else {\n        // Future syllable\n        return /*#__PURE__*/_jsxDEV(\"span\", {\n          style: {\n            color: 'rgba(0,0,0,0.5)'\n          },\n          children: syll\n        }, i, false, {\n          fileName: _jsxFileName,\n          lineNumber: 89,\n          columnNumber: 11\n        }, this);\n      }\n    });\n\n    // Now partedWord is an array of React elements. \n    // Render them back-to-back, so they appear as a single normal word.\n    return /*#__PURE__*/_jsxDEV(\"span\", {\n      style: {\n        marginRight: '0.7rem'\n      },\n      children: partedWord\n    }, wIdx, false, {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 7\n    }, this);\n  });\n\n  // Progress bar ratio\n  const progressRatio = (currentSyllableIndex + 1) / totalSyllables;\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      textAlign: 'center'\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"p\", {\n      style: {\n        marginBottom: '0.5rem'\n      },\n      children: [\"Syllable \", currentSyllableIndex + 1, \" of \", totalSyllables]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 111,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        width: '80%',\n        height: '10px',\n        background: '#ddd',\n        borderRadius: '5px',\n        margin: '1rem auto',\n        overflow: 'hidden'\n      },\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          width: `${progressRatio * 100}%`,\n          height: '100%',\n          background: '#4caf50',\n          transition: 'width 0.3s ease'\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 126,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 116,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        marginBottom: '2rem',\n        fontSize: '1.5rem'\n      },\n      children: sentenceDisplay\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 137,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        display: 'flex',\n        flexDirection: 'column',\n        alignItems: 'center'\n      },\n      children: [/*#__PURE__*/_jsxDEV(AnimatePresence, {\n        mode: \"wait\",\n        children: /*#__PURE__*/_jsxDEV(motion.div, {\n          className: \"syllable-box\",\n          initial: {\n            opacity: 0,\n            scale: 0.8\n          },\n          animate: {\n            opacity: 1,\n            scale: 1\n          },\n          exit: {\n            opacity: 0,\n            scale: 0.8\n          },\n          transition: {\n            duration: 0.3\n          },\n          style: {\n            display: 'flex',\n            alignItems: 'center',\n            justifyContent: 'center',\n            minHeight: '120px',\n            minWidth: '250px',\n            textAlign: 'center'\n          },\n          children: currentSyllable\n        }, currentSyllable, false, {\n          fileName: _jsxFileName,\n          lineNumber: 144,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 143,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        style: {\n          marginTop: '2rem',\n          padding: '1rem 2rem',\n          fontSize: '1rem',\n          background: '#1c3faa',\n          color: 'white',\n          border: 'none',\n          borderRadius: '1rem',\n          cursor: 'pointer',\n          boxShadow: '0 4px 10px rgba(0, 0, 0, 0.1)'\n        },\n        onClick: () => setCurrentSyllableIndex(0),\n        children: \"\\uD83D\\uDD01 Restart Sentence\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 165,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 142,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 109,\n    columnNumber: 5\n  }, this);\n};\n_s(SyllableStepper, \"ikZUqHdjoTk9fy4es/hajzTlj4s=\");\n_c = SyllableStepper;\nexport default SyllableStepper;\nvar _c;\n$RefreshReg$(_c, \"SyllableStepper\");","map":{"version":3,"names":["React","useEffect","useState","loadSentencesFromCSV","motion","AnimatePresence","jsxDEV","_jsxDEV","SyllableStepper","_s","sentences","setSentences","currentSentenceIndex","setCurrentSentenceIndex","currentSyllableIndex","setCurrentSyllableIndex","fetch","then","res","text","result","nextSyllable","sentence","flattenedSyllables","length","prev","handleKey","e","code","preventDefault","window","addEventListener","removeEventListener","children","fileName","_jsxFileName","lineNumber","columnNumber","currentSentence","totalSyllables","currentSyllable","wordIndex","currentWordIndex","syllIndex","currentWordSyllIndex","mapping","sentenceDisplay","words","map","wordData","wIdx","word","syllables","syllablesBeforeThisWord","slice","reduce","acc","wd","partedWord","syll","i","globalSyllIndex","style","color","fontWeight","marginRight","progressRatio","textAlign","marginBottom","width","height","background","borderRadius","margin","overflow","transition","fontSize","display","flexDirection","alignItems","mode","div","className","initial","opacity","scale","animate","exit","duration","justifyContent","minHeight","minWidth","marginTop","padding","border","cursor","boxShadow","onClick","_c","$RefreshReg$"],"sources":["/Users/sorensloth/Git_repositories/Project-Applied-CogSci-Stuttering/sts-frontend/src/components/SyllableStepper.tsx"],"sourcesContent":["import React, { useEffect, useState } from 'react';\nimport { loadSentencesFromCSV, Sentence } from '../utils/parseCSV';\nimport { motion, AnimatePresence } from 'framer-motion';\n\nconst SyllableStepper: React.FC = () => {\n  const [sentences, setSentences] = useState<Sentence[]>([]);\n  const [currentSentenceIndex, setCurrentSentenceIndex] = useState(0);\n  const [currentSyllableIndex, setCurrentSyllableIndex] = useState(0);\n\n  // Load CSV once\n  useEffect(() => {\n    fetch('/STS_practice_sentences.csv')\n      .then(res => res.text())\n      .then(text => {\n        const result = loadSentencesFromCSV(text);\n        setSentences(result);\n      });\n  }, []);\n\n  const nextSyllable = () => {\n    const sentence = sentences[currentSentenceIndex];\n    if (!sentence) return;\n\n    // If not at the end of current sentence, go to next syllable\n    if (currentSyllableIndex < sentence.flattenedSyllables.length - 1) {\n      setCurrentSyllableIndex(prev => prev + 1);\n    } \n    // Else, go to the next sentence if available\n    else if (currentSentenceIndex < sentences.length - 1) {\n      setCurrentSentenceIndex(prev => prev + 1);\n      setCurrentSyllableIndex(0);\n    }\n  };\n\n  // Spacebar listener\n  useEffect(() => {\n    const handleKey = (e: KeyboardEvent) => {\n      if (e.code === 'Space') {\n        e.preventDefault();\n        nextSyllable();\n      }\n    };\n    window.addEventListener('keydown', handleKey);\n    return () => window.removeEventListener('keydown', handleKey);\n  }, [sentences, currentSentenceIndex, currentSyllableIndex]);\n\n  if (sentences.length === 0) {\n    return <p>Loading sentences...</p>;\n  }\n\n  const currentSentence = sentences[currentSentenceIndex];\n  const totalSyllables = currentSentence.flattenedSyllables.length;\n  const currentSyllable = currentSentence.flattenedSyllables[currentSyllableIndex];\n\n  // We'll need to know which word & syllable is \"current\"\n  const { wordIndex: currentWordIndex, syllIndex: currentWordSyllIndex } =\n    currentSentence.mapping[currentSyllableIndex];\n\n  // For each word, we highlight each syllable individually.\n  const sentenceDisplay = currentSentence.words.map((wordData, wIdx) => {\n    const { word, syllables } = wordData;\n\n    // Count how many syllables come *before* this word (to find global indices).\n    const syllablesBeforeThisWord = currentSentence.words\n      .slice(0, wIdx)\n      .reduce((acc, wd) => acc + wd.syllables.length, 0);\n\n    // Build a span for each syllable in the word\n    const partedWord = syllables.map((syll, i) => {\n      const globalSyllIndex = syllablesBeforeThisWord + i;\n\n      if (globalSyllIndex < currentSyllableIndex) {\n        // This syllable is completed\n        return (\n          <span style={{ color: 'green' }} key={i}>\n            {syll}\n          </span>\n        );\n      } else if (globalSyllIndex === currentSyllableIndex) {\n        // This is the current syllable\n        return (\n          <span style={{ fontWeight: 'bold', color: '#000' }} key={i}>\n            {syll}\n          </span>\n        );\n      } else {\n        // Future syllable\n        return (\n          <span style={{ color: 'rgba(0,0,0,0.5)' }} key={i}>\n            {syll}\n          </span>\n        );\n      }\n    });\n\n    // Now partedWord is an array of React elements. \n    // Render them back-to-back, so they appear as a single normal word.\n    return (\n      <span key={wIdx} style={{ marginRight: '0.7rem' }}>\n        {partedWord}\n      </span>\n    );\n  });\n\n  // Progress bar ratio\n  const progressRatio = (currentSyllableIndex + 1) / totalSyllables;\n\n  return (\n    <div style={{ textAlign: 'center' }}>\n      {/* Syllable Count */}\n      <p style={{ marginBottom: '0.5rem' }}>\n        Syllable {currentSyllableIndex + 1} of {totalSyllables}\n      </p>\n\n      {/* Progress Bar */}\n      <div\n        style={{\n          width: '80%',\n          height: '10px',\n          background: '#ddd',\n          borderRadius: '5px',\n          margin: '1rem auto',\n          overflow: 'hidden',\n        }}\n      >\n        <div\n          style={{\n            width: `${progressRatio * 100}%`,\n            height: '100%',\n            background: '#4caf50',\n            transition: 'width 0.3s ease',\n          }}\n        />\n      </div>\n\n      {/* Display the entire sentence as normal words */}\n      <div style={{ marginBottom: '2rem', fontSize: '1.5rem' }}>\n        {sentenceDisplay}\n      </div>\n\n      {/* Animated Syllable Box (still showing the current syllable) */}\n      <div style={{ display: 'flex', flexDirection: 'column', alignItems: 'center' }}>\n        <AnimatePresence mode=\"wait\">\n          <motion.div\n            key={currentSyllable}\n            className=\"syllable-box\"\n            initial={{ opacity: 0, scale: 0.8 }}\n            animate={{ opacity: 1, scale: 1 }}\n            exit={{ opacity: 0, scale: 0.8 }}\n            transition={{ duration: 0.3 }}\n            style={{\n              display: 'flex',\n              alignItems: 'center',\n              justifyContent: 'center',\n              minHeight: '120px',\n              minWidth: '250px',\n              textAlign: 'center',\n            }}\n          >\n            {currentSyllable}\n          </motion.div>\n        </AnimatePresence>\n\n        {/* Restart Button */}\n        <button\n          style={{\n            marginTop: '2rem',\n            padding: '1rem 2rem',\n            fontSize: '1rem',\n            background: '#1c3faa',\n            color: 'white',\n            border: 'none',\n            borderRadius: '1rem',\n            cursor: 'pointer',\n            boxShadow: '0 4px 10px rgba(0, 0, 0, 0.1)',\n          }}\n          onClick={() => setCurrentSyllableIndex(0)}\n        >\n          🔁 Restart Sentence\n        </button>\n      </div>\n    </div>\n  );\n};\n\nexport default SyllableStepper;\n\n\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}